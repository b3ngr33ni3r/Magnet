#ifndef ENTITY_H
#define ENTITY_H

#include "WorldStandards.h"
#include "EntityDimensions.h"
#include "ShapeTransform.h"
#include "ShapeDraw.h"
#include "ShapeData.h"

namespace Entity{
	enum Type{
		Circle,
		Rect,
		Triangle,
		Bullet
		};

		enum Context{
            Static,
            Dynamic
		};

class Entity
{
    public:
        /** Default constructor */
        Entity(Entity::Type type,EntityDimensions dims,b2World* engineWorld,Entity::Context context = Entity::Dynamic);
        Entity(ShapeTransform* trans,ShapeDraw* draw,ShapeData* data);

        //the Transformable,Drawable,Data of this Entity
        ShapeTransform* Transform;
        ShapeDraw*	   Draw;
        ShapeData*	   Data;

        /** Default destructor */
        ~Entity();
    protected:
    private:

        //if Entity::Type constructor is used, these config stuff
        void CraftCircle(b2World* engineWorld,Entity::Context context,EntityDimensions dims,Material mat);
        void CraftRect(b2World* engineWorld,Entity::Context context,EntityDimensions dims,Material mat);
        void CraftTriangle(b2World* engineWorld,Entity::Context context,EntityDimensions dims,Material mat);
        void CraftBullet(b2World* engineWorld,Entity::Context context,EntityDimensions dims,Material mat);
};


	};


#endif // ENTITY_H

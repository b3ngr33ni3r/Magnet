#include "Entity.h"

Entity::Entity(EntityInfo::Type type,EntityDimensions dims,b2World* engineWorld,Material mat,EntityInfo::Context context)
{
    //ctor
    switch(type)
    {
        case EntityInfo::Bullet:{CraftBullet(engineWorld,context,dims,mat);}break;
        case EntityInfo::Circle:{CraftCircle(engineWorld,context,dims,mat);}break;
        case EntityInfo::Rect:{CraftRect(engineWorld,context,dims,mat);}break;
        case EntityInfo::Triangle:{CraftTriangle(engineWorld,context,dims,mat);}break;
    }
}

Entity::Entity(ShapeTransform* trans,ShapeDraw* draw,ShapeData* data)
{
    Transform = trans;
    Data = data;
    Draw = draw;
}

Entity::~Entity()
{
    //dtor
    delete Transform;
    delete Draw;
    delete Data;
}

void Entity::CraftBullet(b2World* engineWorld,EntityInfo::Context context,EntityDimensions dims,Material mat)
{

    b2BodyDef bodyDef;
    if (context == EntityInfo::Dynamic)
        bodyDef.type = b2_dynamicBody;

    bodyDef.allowSleep = true;
    bodyDef.awake = true;
    bodyDef.bullet = true;

    //check if material is using an image, correct things if this is the case
    if (mat.UsesImage())
    {
        dims.height = mat.GetImage()->GetHeight();
        dims.width = mat.GetImage()->GetWidth();
    }

    //check if material is using text, correct if needed
    if (mat.UsesText())
    {
        dims.height = mat.GetText()->GetLocalBounds().Height;
        dims.width =  mat.GetText()->GetLocalBounds().Width;
    }

    //set the bodydef's position in box2d coords
    bodyDef.position.Set(((dims.posx+dims.width)/2)*WorldStandards::ppm, ((dims.posy+dims.height)/2)*WorldStandards::ppm);

    //set incoming angle
    bodyDef.angle = (((-1)*dims.angle)*WorldStandards::degtorad);

    //make a an actual box
    b2PolygonShape dynamicBox;
    dynamicBox.SetAsBox((dims.width/2)*WorldStandards::ppm, (dims.height/2)*WorldStandards::ppm);

    //make fixture
    b2FixtureDef fixtureDef;

    //fixtureize the box
    fixtureDef.shape = &dynamicBox;

    //apply material info to the fixture
    fixtureDef.density = mat.GetDensity();
    fixtureDef.friction = mat.GetFriction();
    fixtureDef.restitution = mat.GetRestitution();

    //set the data to be all set to be Created
    Data = new ShapeData(fixtureDef,bodyDef,engineWorld);

    //create a rectangleshape with given width and height
    sf::RectangleShape* rectangle = new sf::RectangleShape(sf::Vector2f(dims.width,dims.height));

    //adjust rectangle properties
    rectangle->SetPosition(dims.posx,dims.posy);
    rectangle->SetOrigin(dims.width/2,dims.height/2);
    rectangle->Rotate(dims.angle);

    //set the stuff for Draw and Transform
    Draw = new ShapeDraw(rectangle);
    Transform = new ShapeTransform(rectangle);

}


void Entity::CraftRect(b2World* engineWorld,EntityInfo::Context context,EntityDimensions dims,Material mat)
{

    b2BodyDef bodyDef;
    if (context == EntityInfo::Dynamic)
        bodyDef.type = b2_dynamicBody;

    bodyDef.allowSleep = true;
    bodyDef.awake = true;
    bodyDef.bullet = false;

    //check if material is using an image, correct things if this is the case
    if (mat.UsesImage())
    {
        dims.height = mat.GetImage()->GetHeight();
        dims.width = mat.GetImage()->GetWidth();
    }

    //check if material is using text, correct if needed
    if (mat.UsesText())
    {
        dims.height = mat.GetText()->GetLocalBounds().Height;
        dims.width =  mat.GetText()->GetLocalBounds().Width;
    }

    //set the bodydef's position in box2d coords
    bodyDef.position.Set(((dims.posx+dims.width)/2)*WorldStandards::ppm, ((dims.posy+dims.height)/2)*WorldStandards::ppm);

    //set incoming angle
    bodyDef.angle = (((-1)*dims.angle)*WorldStandards::degtorad);

    //make a an actual box
    b2PolygonShape dynamicBox;
    dynamicBox.SetAsBox((dims.width/2)*WorldStandards::ppm, (dims.height/2)*WorldStandards::ppm);

    //make fixture
    b2FixtureDef fixtureDef;

    //fixtureize the box
    fixtureDef.shape = &dynamicBox;

    //apply material info to the fixture
    fixtureDef.density = mat.GetDensity();
    fixtureDef.friction = mat.GetFriction();
    fixtureDef.restitution = mat.GetRestitution();

    //set the data to be all set to be Created
    Data = new ShapeData(fixtureDef,bodyDef,engineWorld);

    //create a rectangleshape with given width and height
    sf::RectangleShape* rectangle = new sf::RectangleShape(sf::Vector2f(dims.width,dims.height));

    //adjust rectangle properties
    rectangle->SetPosition(dims.posx,dims.posy);
    rectangle->SetOrigin(dims.width/2,dims.height/2);
    rectangle->Rotate(dims.angle);

    //set the stuff for Draw and Transform
    Draw = new ShapeDraw(rectangle);
    Transform = new ShapeTransform(rectangle);

}


void Entity::CraftCircle(b2World* engineWorld,EntityInfo::Context context,EntityDimensions dims,Material mat)
{

    b2BodyDef bodyDef;
    if (context == EntityInfo::Dynamic)
        bodyDef.type = b2_dynamicBody;

    bodyDef.allowSleep = true;
    bodyDef.awake = true;
    bodyDef.bullet = true;

    //check if material is using an image, correct things if this is the case
    if (mat.UsesImage())
    {
        //to be successful, height should = width so this is irrelevent if its height or width
        dims.radius = mat.GetImage()->GetHeight();
    }

    //check if material is using text, correct if needed
    if (mat.UsesText())
    {
        std::cout<<"[Entity][CraftCircle] Circle Using Text = dumb\n";
    }

    //set the bodydef's position in box2d coords
    bodyDef.position.Set(dims.posx*WorldStandards::ppm, dims.posy*WorldStandards::ppm);

    //set incoming angle
    bodyDef.angle = (((-1)*dims.angle)*WorldStandards::degtorad);

    //make a an actual circle
    b2CircleShape circle;
    circle.m_radius = dims.radius * WorldStandards::ppm;

    //make fixture
    b2FixtureDef fixtureDef;

    //fixtureize the box
    fixtureDef.shape = &circle;

    //apply material info to the fixture
    fixtureDef.density = mat.GetDensity();
    fixtureDef.friction = mat.GetFriction();
    fixtureDef.restitution = mat.GetRestitution();

    //set the data to be all set to be Created
    Data = new ShapeData(fixtureDef,bodyDef,engineWorld);

    //create a rectangleshape with given width and height
    sf::CircleShape* rectangle = new sf::CircleShape(sf::Vector2f(dims.width,dims.height));

    //adjust rectangle properties
    rectangle->SetPosition(dims.posx,dims.posy);
    rectangle->SetOrigin(dims.width/2,dims.height/2);
    rectangle->Rotate(dims.angle);

    //set the stuff for Draw and Transform
    Draw = new ShapeDraw(rectangle);
    Transform = new ShapeTransform(rectangle);

}
